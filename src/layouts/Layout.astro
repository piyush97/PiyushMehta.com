---
import Footer from '../components/Footer.astro';
import Navbar from '../components/Navbar.astro';
import SEO from '../components/SEO.astro';
import SearchModal from '../components/SearchModal.astro';
import '../styles/global.css';
import SpeedInsights from "@vercel/speed-insights/astro"
import favicon from "../assets/favicon.svg";
import type { JsonLdData } from '../types/schema';

export interface Props {
  title: string;
  description?: string;
  type?: 'website' | 'article';
  image?: string;
  author?: string;
  publishedTime?: Date;
  modifiedTime?: Date;
  tags?: string[];
  canonical?: string;
  noindex?: boolean;
  schema?: JsonLdData;
  keywords?: string[];
}

const {
  title,
  description = 'Piyush Mehta - Senior Software Engineer & React Developer in Canada. Expert in React.js, Node.js, and modern web development technologies.',
  type = 'website',
  image,
  author,
  publishedTime,
  modifiedTime,
  tags,
  canonical,
  noindex,
  schema,
  keywords,
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href={favicon.src} />
    <link
      rel="alternate"
      type="application/rss+xml"
      title="Piyush Mehta - Blog RSS Feed"
      href="/rss.xml"
    />
    <meta name="generator" content={Astro.generator} />
    <SpeedInsights/>
    <!-- SEO Component (includes OpenGraph functionality) -->
    <SEO
      title={title}
      description={description}
      type={type}
      image={image}
      author={author}
      publishedTime={publishedTime}
      modifiedTime={modifiedTime}
      tags={tags}
      canonical={canonical}
      noindex={noindex}
      schema={schema}
      keywords={keywords}
    />

    <script>
      // Enhanced theme detection and setting for multiple themes
      const getThemePreference = (): string => {
        if (
          typeof localStorage !== 'undefined' &&
          localStorage.getItem('theme')
        ) {
          return localStorage.getItem('theme') || 'professional-dark';
        }
        return window.matchMedia('(prefers-color-scheme: light)').matches
          ? 'professional-light'
          : 'professional-dark';
      };

      // Disable transitions during theme initialization to prevent flash
      document.documentElement.classList.add('no-transition');

      // Get the saved theme
      const savedTheme = getThemePreference();
      
      // Clear any existing theme classes
      document.documentElement.classList.remove(
        'professional-dark',
        'professional-light',
        'retro-tech',
        'minimalist',
        'high-contrast',
        'custom-theme',
        'light',
        'dark'
      );
      
      // Set the theme class
      document.documentElement.classList.add(savedTheme);
      
      // For backward compatibility with existing code
      const lightThemes = ['professional-light', 'minimalist'];
      if (lightThemes.includes(savedTheme)) {
        document.documentElement.classList.add('light');
      }
      
      // If there's a custom theme, apply the saved accent color
      if (savedTheme === 'custom-theme' && localStorage.getItem('custom-accent-color')) {
        const accentColor = localStorage.getItem('custom-accent-color');
        if (accentColor) {
          document.documentElement.style.setProperty('--color-accent', accentColor);
          
          // Try to create shadow color from accent
          try {
            const hexToRgb = (hex: string) => {
              const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
              return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
              } : null;
            };
            
            const rgb = hexToRgb(accentColor);
            if (rgb) {
              document.documentElement.style.setProperty(
                '--color-shadow',
                `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.25)`
              );
            }
          } catch (e) {
            console.error('Error setting custom theme:', e);
          }
        }
      }

      if (typeof localStorage !== 'undefined') {
        localStorage.setItem('theme', savedTheme);
      }

      // Re-enable transitions after a brief delay
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          document.documentElement.classList.remove('no-transition');
        });
      });
    </script>
  </head>
  <body class="min-h-screen flex flex-col">
    
    <Navbar />
    <SearchModal />
    <main class="flex-1 pt-16">
      <slot />
    </main>
    <Footer />

    <script src="/src/scripts/enhanced-navbar.js"></script>
    
    <script>
      // Enhanced theme toggle functionality for multi-theme support
      function toggleTheme() {
        const element = document.documentElement;
        
        // Disable transitions during theme change
        element.classList.add('no-transition');
        
        // Determine current theme
        const currentTheme = getCurrentTheme();
        
        // Check if it's a light theme
        const isLightTheme = currentTheme.includes('light') || currentTheme === 'minimalist';
        
        // Toggle between professional light and dark themes
        const newTheme = isLightTheme ? 'professional-dark' : 'professional-light';
        
        // Remove all theme classes
        element.classList.remove(
          'professional-dark',
          'professional-light',
          'retro-tech',
          'minimalist',
          'high-contrast',
          'custom-theme',
          'light',
          'dark'
        );
        
        // Add the new theme class
        element.classList.add(newTheme);
        
        // For backward compatibility
        if (newTheme === 'professional-light') {
          element.classList.add('light');
        }
        
        // Store the theme preference
        localStorage.setItem('theme', newTheme);
        
        // Dispatch theme change event
        const event = new CustomEvent('themechange', { detail: { theme: newTheme } });
        document.dispatchEvent(event);

        // Re-enable transitions after a brief delay
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            element.classList.remove('no-transition');
          });
        });
      }
      
      // Get the current theme
      function getCurrentTheme() {
        const root = document.documentElement;
        const possibleThemes = [
          'professional-dark',
          'professional-light',
          'retro-tech',
          'minimalist',
          'high-contrast',
          'custom-theme'
        ];
        
        // For backwards compatibility
        if (root.classList.contains('light') && !hasAnySpecificTheme()) {
          return 'professional-light';
        } else if (!root.classList.contains('light') && !hasAnySpecificTheme()) {
          return 'professional-dark';
        }
        
        for (const theme of possibleThemes) {
          if (root.classList.contains(theme)) {
            return theme;
          }
        }
        
        return 'professional-dark';
      }
      
      // Check if any specific theme is applied
      function hasAnySpecificTheme() {
        const root = document.documentElement;
        const themes = [
          'professional-dark',
          'professional-light',
          'retro-tech',
          'minimalist',
          'high-contrast',
          'custom-theme'
        ];
        
        return themes.some(theme => root.classList.contains(theme));
      }

      // Expose toggle function globally
      (window as any).toggleTheme = toggleTheme;
      (window as any).getCurrentTheme = getCurrentTheme;
    </script>
  </body>
</html>
