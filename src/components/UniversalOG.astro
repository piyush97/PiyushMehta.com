---
// üé® Universal OG Image Component
// Automatically applies optimal OG images to any page

import { getEnhancedOGConfig } from '../middleware/auto-og';
import type { PageOGConfig } from '../utils/og-page-config';

export interface Props {
  title?: string;
  description?: string;
  tags?: string[];
  ogTemplate?: 'default' | 'minimal' | 'tech' | 'blog' | 'cyber' | 'gradient' | 'terminal' | 'modern' | 'professional';
  ogTheme?: 'dark' | 'light' | 'retro' | 'neon' | 'corporate' | 'warm' | 'ocean';
  pageType?: 'article' | 'website' | 'project' | 'about' | 'contact' | 'services';
  author?: string;
  publishedTime?: Date;
  category?: string;
  forceTemplate?: boolean; // Override intelligent selection
}

const {
  title,
  description,
  tags,
  ogTemplate,
  ogTheme,
  pageType,
  author = 'Piyush Mehta',
  publishedTime,
  category,
  forceTemplate = false,
} = Astro.props;

// Get the current pathname
const pathname = Astro.url.pathname;

// Generate enhanced OG configuration
const frontmatter = {
  title,
  description,
  tags,
  ogTemplate,
  ogTheme,
};

const ogConfig = getEnhancedOGConfig(pathname, frontmatter);

// Override with explicit props if forceTemplate is true
const finalConfig: PageOGConfig = forceTemplate && ogTemplate && ogTheme ? {
  title: title || ogConfig.title,
  description: description || ogConfig.description,
  template: ogTemplate,
  theme: ogTheme,
  tags: tags || ogConfig.tags,
  category: category || ogConfig.category,
} : {
  ...ogConfig,
  title: title || ogConfig.title,
  description: description || ogConfig.description,
  tags: tags || ogConfig.tags,
  category: category || ogConfig.category,
};

// Generate OG image URL
const baseUrl = Astro.site?.toString() || Astro.url.origin;
const ogParams = new URLSearchParams({
  title: finalConfig.title.substring(0, 100),
  ...(finalConfig.description && { description: finalConfig.description.substring(0, 150) }),
  ...(pageType && { type: pageType }),
  ...(publishedTime && { date: publishedTime.toISOString() }),
  ...(finalConfig.tags && finalConfig.tags.length > 0 && { tags: finalConfig.tags.slice(0, 5).join(',') }),
  template: finalConfig.template,
  theme: finalConfig.theme,
  ...(author && { author }),
  ...(finalConfig.category && { category: finalConfig.category }),
});

const ogImageUrl = `${baseUrl}/api/og-image?${ogParams.toString()}`;

// Generate Twitter-optimized URL
const twitterParams = new URLSearchParams({
  title: finalConfig.title.substring(0, 80),
  ...(finalConfig.description && { description: finalConfig.description.substring(0, 120) }),
  ...(pageType && { type: pageType }),
  ...(publishedTime && { date: publishedTime.toISOString() }),
  ...(finalConfig.tags && finalConfig.tags.length > 0 && { tags: finalConfig.tags.slice(0, 3).join(',') }),
  template: finalConfig.template === 'cyber' ? 'tech' : finalConfig.template, // Twitter-friendly templates
  theme: finalConfig.theme === 'neon' ? 'dark' : finalConfig.theme,
  twitter: 'true',
});

const twitterImageUrl = `${baseUrl}/api/og-image?${twitterParams.toString()}`;

// Development debugging
if (import.meta.env.DEV) {
  console.log(`üé® Universal OG for ${pathname}:`, {
    template: finalConfig.template,
    theme: finalConfig.theme,
    category: finalConfig.category,
    ogUrl: ogImageUrl,
  });
}
---

<!-- üé® Universal OG Meta Tags -->

<!-- Primary OpenGraph -->
<meta property="og:type" content={pageType === 'article' ? 'article' : 'website'} />
<meta property="og:title" content={finalConfig.title} />
<meta property="og:description" content={finalConfig.description} />
<meta property="og:image" content={ogImageUrl} />
<meta property="og:image:secure_url" content={ogImageUrl} />
<meta property="og:image:type" content="image/png" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:alt" content={`${finalConfig.title} - ${author}`} />
<meta property="og:site_name" content="Piyush Mehta" />
<meta property="og:locale" content="en_US" />

<!-- Twitter Cards -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={finalConfig.title.length > 70 ? finalConfig.title.substring(0, 67) + '...' : finalConfig.title} />
<meta name="twitter:description" content={finalConfig.description && finalConfig.description.length > 200 ? finalConfig.description.substring(0, 197) + '...' : finalConfig.description} />
<meta name="twitter:image" content={twitterImageUrl} />
<meta name="twitter:image:alt" content={`${finalConfig.title} - ${author}`} />
<meta name="twitter:site" content="@piyushmehtas" />
<meta name="twitter:creator" content="@piyushmehtas" />

<!-- Article-specific meta tags -->
{pageType === 'article' && publishedTime && (
  <>
    <meta property="article:published_time" content={publishedTime.toISOString()} />
    <meta property="article:author" content={author} />
    <meta property="article:section" content={finalConfig.category || 'Technology'} />
    {finalConfig.tags && finalConfig.tags.map((tag) => (
      <meta property="article:tag" content={tag} />
    ))}
  </>
)}

<!-- Additional SEO Enhancement -->
<meta property="og:updated_time" content={new Date().toISOString()} />
{finalConfig.category && <meta property="og:section" content={finalConfig.category} />}

<!-- Rich Snippets for Search Engines -->
<script type="application/ld+json" set:html={JSON.stringify({
  '@context': 'https://schema.org',
  '@type': pageType === 'article' ? 'Article' : 'WebPage',
  headline: finalConfig.title,
  description: finalConfig.description,
  author: {
    '@type': 'Person',
    name: author,
    url: 'https://piyushmehta.com',
  },
  image: {
    '@type': 'ImageObject',
    url: ogImageUrl,
    width: 1200,
    height: 630,
  },
  url: Astro.url.toString(),
  ...(publishedTime && { datePublished: publishedTime.toISOString() }),
  ...(finalConfig.tags && { keywords: finalConfig.tags.join(', ') }),
  publisher: {
    '@type': 'Person',
    name: 'Piyush Mehta',
    url: 'https://piyushmehta.com',
  },
})} />

<!-- Development Preview Links -->
{import.meta.env.DEV && (
  <>
    <!-- OG Image Preview -->
    <link rel="prefetch" href={ogImageUrl} />
    <!-- Add preview comment for debugging -->
    <!-- OG Image URL: {ogImageUrl} -->
    <!-- Twitter Image URL: {twitterImageUrl} -->
    <!-- Template: {finalConfig.template} | Theme: {finalConfig.theme} -->
  </>
)}

<!-- Performance Hints -->
<link rel="dns-prefetch" href={new URL(ogImageUrl).origin} />
<link rel="preconnect" href={new URL(ogImageUrl).origin} crossorigin />

<style define:vars={{ ogImageUrl }}>
  /* Ensure OG images are optimized for loading */
  :root {
    --og-image-url: var(--ogImageUrl);
  }
</style>

<script define:vars={{ ogImageUrl }}>
  // Client-side OG image validation (development only)
  if (import.meta.env.DEV) {
    // Preload OG image to check for errors
    const img = new Image();
    img.onload = () => {
      console.log('‚úÖ OG image loaded successfully:', img.src);
    };
    img.onerror = () => {
      console.error('‚ùå Failed to load OG image:', img.src);
    };
    img.src = ogImageUrl;
  }
</script>