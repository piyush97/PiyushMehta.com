---
// Simple search modal - working version
---

<!-- Search Modal -->
<div 
  id="search-modal" 
  class="fixed inset-0 z-50 flex items-start justify-center pt-16 transition-all duration-300 opacity-0 invisible bg-black/50 backdrop-blur-sm"
  aria-hidden="true"
  role="dialog"
>
  <div class="w-full max-w-2xl bg-light-900 rounded-xl shadow-2xl border border-card-border overflow-hidden mx-4">
    <!-- Search Input -->
    <div class="flex items-center p-4 border-b border-card-border">
      <svg 
        class="w-5 h-5 text-light-400 mr-3"
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
      >
        <path 
          stroke-linecap="round" 
          stroke-linejoin="round" 
          stroke-width={2} 
          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" 
        />
      </svg>
      
      <input
        id="search-input"
        type="text"
        placeholder="Search articles, projects, and more..."
        class="flex-1 bg-transparent text-light-100 placeholder-light-400 outline-none text-lg"
      />
      
      <button
        id="search-clear"
        class="hidden p-1 text-light-400 hover:text-light-200 transition-colors ml-2"
        aria-label="Clear search"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
      
      <button
        id="search-close"
        class="ml-3 p-1 text-light-400 hover:text-light-200 transition-colors"
        aria-label="Close search"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <!-- Search Results -->
    <div id="search-results" class="max-h-96 overflow-y-auto">
      <!-- Default state -->
      <div id="search-default" class="p-8 text-center text-light-400">
        <svg class="w-12 h-12 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        <p>Start typing to search...</p>
        <p class="text-sm mt-2">Search through blog posts, projects, and pages</p>
      </div>

      <!-- Loading state -->
      <div id="search-loading" class="hidden p-8 text-center">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-accent mx-auto mb-4"></div>
        <span class="text-light-300">Searching...</span>
      </div>

      <!-- No results -->
      <div id="search-no-results" class="hidden p-8 text-center text-light-400">
        <svg class="w-12 h-12 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.529.901-6.172 2.379l-.344.344A7.953 7.953 0 014 12a8.001 8.001 0 0116 0c0 1.691-.525 3.255-1.421 4.545l-.344-.344z" />
        </svg>
        <p>No results found</p>
        <p class="text-sm mt-2">Try different keywords or check spelling</p>
      </div>

      <!-- Results list -->
      <div id="search-results-list" class="hidden">
        <!-- Results will be populated by JavaScript -->
      </div>
    </div>

    <!-- Footer -->
    <div id="search-footer" class="hidden px-4 py-3 bg-light-800 border-t border-card-border">
      <div class="flex items-center justify-between text-xs text-light-400">
        <span>Use ↑↓ to navigate, Enter to select, Esc to close</span>
        <span id="search-count">0 results</span>
      </div>
    </div>
  </div>
</div>

<script>
  // Simple search functionality
  const searchModal = {
    modal: null,
    input: null,
    clearBtn: null,
    closeBtn: null,
    defaultView: null,
    loadingView: null,
    noResultsView: null,
    resultsList: null,
    footer: null,
    countSpan: null,
    isOpen: false,
    selectedIndex: -1,
    searchTimeout: null,
    
    init() {
      this.modal = document.getElementById('search-modal');
      this.input = document.getElementById('search-input');
      this.clearBtn = document.getElementById('search-clear');
      this.closeBtn = document.getElementById('search-close');
      this.defaultView = document.getElementById('search-default');
      this.loadingView = document.getElementById('search-loading');
      this.noResultsView = document.getElementById('search-no-results');
      this.resultsList = document.getElementById('search-results-list');
      this.footer = document.getElementById('search-footer');
      this.countSpan = document.getElementById('search-count');
      
      this.bindEvents();
    },

    bindEvents() {
      // Close events
      this.closeBtn?.addEventListener('click', () => this.close());
      this.modal?.addEventListener('click', (e) => {
        if (e.target === this.modal) this.close();
      });

      // Clear search
      this.clearBtn?.addEventListener('click', () => this.clearSearch());

      // Search input
      this.input?.addEventListener('input', (e) => this.handleInput(e.target.value));
      this.input?.addEventListener('keydown', (e) => this.handleKeydown(e));

      // Global shortcuts
      document.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
          e.preventDefault();
          this.open();
        }
        if (e.key === 'Escape' && this.isOpen) {
          this.close();
        }
      });
    },

    open() {
      this.isOpen = true;
      this.modal?.classList.remove('opacity-0', 'invisible');
      this.modal?.classList.add('opacity-100', 'visible');
      this.modal?.setAttribute('aria-hidden', 'false');
      
      setTimeout(() => {
        this.input?.focus();
      }, 100);
      
      document.body.style.overflow = 'hidden';
    },

    close() {
      this.isOpen = false;
      this.modal?.classList.add('opacity-0', 'invisible');
      this.modal?.classList.remove('opacity-100', 'visible');
      this.modal?.setAttribute('aria-hidden', 'true');
      
      this.clearSearch();
      document.body.style.overflow = '';
    },

    clearSearch() {
      if (this.input) this.input.value = '';
      this.selectedIndex = -1;
      this.showDefault();
      this.clearBtn?.classList.add('hidden');
    },

    handleInput(query) {
      // Show/hide clear button
      if (query.trim()) {
        this.clearBtn?.classList.remove('hidden');
      } else {
        this.clearBtn?.classList.add('hidden');
      }

      // Debounce search
      if (this.searchTimeout) {
        clearTimeout(this.searchTimeout);
      }

      this.searchTimeout = setTimeout(() => {
        this.performSearch(query.trim());
      }, 300);
    },

    async performSearch(query) {
      if (!query) {
        this.showDefault();
        return;
      }

      this.showLoading();

      try {
        // Try Pagefind first
        if (window.pagefind) {
          const search = await window.pagefind.search(query);
          const results = await Promise.all(
            search.results.slice(0, 8).map(async (result) => {
              const data = await result.data();
              return {
                url: data.url,
                title: data.meta?.title || data.title || 'Untitled',
                excerpt: data.excerpt || data.meta?.description || 'No description available',
                type: data.meta?.type || 'page'
              };
            })
          );
          
          this.showResults(results, query);
        } else {
          // Fallback search
          this.fallbackSearch(query);
        }
      } catch (error) {
        console.error('Search failed:', error);
        this.fallbackSearch(query);
      }
    },

    fallbackSearch(query) {
      const searchData = [
        {
          url: '/',
          title: 'Home - Piyush Mehta',
          excerpt: 'Senior Software Engineer & React Developer in Canada. Expert in React.js, Node.js, TypeScript, and modern web development technologies.',
          type: 'page'
        },
        {
          url: '/about/',
          title: 'About Piyush Mehta',
          excerpt: 'Senior Software Engineer with 8+ years of experience. Tech speaker, open source contributor, and full-stack developer.',
          type: 'page'
        },
        {
          url: '/projects/',
          title: 'Projects & Portfolio',
          excerpt: 'Showcase of software engineering projects, open source contributions, and technical work.',
          type: 'page'
        },
        {
          url: '/services/',
          title: 'Software Engineering Services',
          excerpt: 'Professional software development services including custom web applications, enterprise solutions, and technical consulting.',
          type: 'page'
        },
        {
          url: '/uses/',
          title: 'Tools & Setup',
          excerpt: 'Development tools, software, hardware, and productivity setup.',
          type: 'page'
        },
        {
          url: '/contact-me/',
          title: 'Contact & Collaboration',
          excerpt: 'Get in touch for software development projects, technical consulting, and collaboration.',
          type: 'page'
        },
        {
          url: '/resume/',
          title: 'Resume & Experience',
          excerpt: 'Professional experience, skills, education, and career background.',
          type: 'page'
        },
        {
          url: '/blog/',
          title: 'Blog',
          excerpt: 'Articles about software development, technology, and building great products.',
          type: 'page'
        }
      ];
      
      const results = searchData.filter(item => {
        const queryLower = query.toLowerCase();
        return item.title.toLowerCase().includes(queryLower) ||
               item.excerpt.toLowerCase().includes(queryLower);
      }).slice(0, 8);

      this.showResults(results, query);
    },

    showDefault() {
      this.hideAllViews();
      this.defaultView?.classList.remove('hidden');
      this.footer?.classList.add('hidden');
    },

    showLoading() {
      this.hideAllViews();
      this.loadingView?.classList.remove('hidden');
      this.footer?.classList.add('hidden');
    },

    showNoResults() {
      this.hideAllViews();
      this.noResultsView?.classList.remove('hidden');
      this.footer?.classList.add('hidden');
    },

    showResults(results, query) {
      this.hideAllViews();
      this.resultsList?.classList.remove('hidden');
      this.footer?.classList.remove('hidden');
      
      if (this.countSpan) {
        this.countSpan.textContent = `${results.length} result${results.length !== 1 ? 's' : ''}`;
      }

      if (results.length === 0) {
        this.showNoResults();
        return;
      }

      const html = results.map((result, index) => `
        <a 
          href="${result.url}" 
          class="search-result block p-4 hover:bg-light-800 transition-colors border-l-4 border-l-transparent hover:border-l-accent"
          data-index="${index}"
        >
          <div class="flex items-start justify-between mb-2">
            <h3 class="font-semibold text-light-100 flex-1">${this.highlightText(result.title, query)}</h3>
            <span class="text-xs text-green-400 font-medium ml-3">${result.type}</span>
          </div>
          <p class="text-sm text-light-300 line-clamp-2">${this.highlightText(result.excerpt, query)}</p>
          <span class="text-xs text-accent mt-2 block">${result.url}</span>
        </a>
      `).join('');

      if (this.resultsList) {
        this.resultsList.innerHTML = html;
      }

      this.selectedIndex = -1;
    },

    hideAllViews() {
      this.defaultView?.classList.add('hidden');
      this.loadingView?.classList.add('hidden');
      this.noResultsView?.classList.add('hidden');
      this.resultsList?.classList.add('hidden');
    },

    highlightText(text, query) {
      if (!query) return text;
      const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
      return text.replace(regex, '<mark class="bg-accent/20 text-accent rounded px-1">$1</mark>');
    },

    handleKeydown(e) {
      const results = document.querySelectorAll('.search-result');
      
      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          this.selectedIndex = Math.min(this.selectedIndex + 1, results.length - 1);
          this.updateSelection();
          break;
        case 'ArrowUp':
          e.preventDefault();
          this.selectedIndex = Math.max(this.selectedIndex - 1, -1);
          this.updateSelection();
          break;
        case 'Enter':
          e.preventDefault();
          if (this.selectedIndex >= 0 && results[this.selectedIndex]) {
            const href = results[this.selectedIndex].getAttribute('href');
            if (href) {
              window.location.href = href;
            }
          }
          break;
      }
    },

    updateSelection() {
      const results = document.querySelectorAll('.search-result');
      results.forEach((result, index) => {
        if (index === this.selectedIndex) {
          result.classList.add('bg-light-800', 'border-l-accent');
          result.scrollIntoView({ block: 'nearest' });
        } else {
          result.classList.remove('bg-light-800', 'border-l-accent');
        }
      });
    }
  };

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    searchModal.init();
    
    // Try to load Pagefind
    if (!window.pagefind) {
      const script = document.createElement('script');
      script.src = '/pagefind/pagefind.js';
      script.async = true;
      document.head.appendChild(script);
    }
    
    // Expose globally for navbar
    window.openSearch = () => searchModal.open();
    window.closeSearch = () => searchModal.close();
    window.searchModal = searchModal;
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  mark {
    background: rgba(255, 215, 0, 0.2);
    color: var(--color-accent);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-weight: 500;
  }
</style>