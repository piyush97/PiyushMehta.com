---
export interface Props {
  title: string;
  url?: string;
  segments?: Array<{ name: string; url: string }>;
}

const { title, url = Astro.url.toString(), segments } = Astro.props;

// Get path segments from URL
const path = Astro.url.pathname;
const pathSegments = path.split('/').filter((segment) => segment);

// Dynamically build breadcrumb items based on path segments
let breadcrumbItems = [
  {
    name: 'Home',
    url: 'https://piyushmehta.com',
  },
];

// If custom segments are provided, use those instead
if (segments) {
  breadcrumbItems = [...breadcrumbItems, ...segments];
} else {
  // Otherwise dynamically generate from path
  let currentPath = '';
  
  for (let i = 0; i < pathSegments.length; i++) {
    const segment = pathSegments[i];
    currentPath += `/${segment}`;
    
    // Skip adding the last segment since it will be added with the title
    if (i < pathSegments.length - 1) {
      breadcrumbItems.push({
        name: segment.charAt(0).toUpperCase() + segment.slice(1).replace(/-/g, ' '),
        url: `https://piyushmehta.com${currentPath}`,
      });
    }
  }
}

// Add the current page as the last item
breadcrumbItems.push({
  name: title,
  url: url,
});

const breadcrumbSchema = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  itemListElement: breadcrumbItems.map((item, index) => ({
    '@type': 'ListItem',
    position: index + 1,
    name: item.name,
    item: item.url,
  })),
};
---

<script
  type="application/ld+json"
  set:html={JSON.stringify(breadcrumbSchema)}
  is:inline
/>

<nav aria-label="Breadcrumb" class="mb-8">
  <ol class="flex items-center space-x-2 text-sm text-text-secondary">
    {
      breadcrumbItems.map((item, index) => (
        <li class="flex items-center">
          {index > 0 && (
            <svg
              class="w-4 h-4 mx-2 text-text-tertiary"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5l7 7-7 7"
              />
            </svg>
          )}
          {index === breadcrumbItems.length - 1 ? (
            <span class="font-medium text-text-primary" aria-current="page">
              {item.name}
            </span>
          ) : (
            <a
              href={item.url}
              class="hover:text-accent transition-colors duration-200"
            >
              {item.name}
            </a>
          )}
        </li>
      ))
    }
  </ol>
</nav>
