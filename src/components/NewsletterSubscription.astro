---
// Interactive newsletter subscription component
---

<newsletter-subscription class="pt-8 mt-12 border-t footer-newsletter border-card-border">
  <div class="max-w-md mx-auto md:mx-0">
    <h4 class="mb-3 text-lg font-semibold text-text-primary">Stay Updated</h4>
    <p class="mb-4 text-sm text-text-secondary">
      Get notified about new blog posts and tech talks.
    </p>
    <form class="newsletter-form" action="#" method="post">
      <div class="flex flex-col gap-3 sm:flex-row">
        <input
          type="email"
          placeholder="Enter your email"
          class="flex-1 px-4 py-2 transition-colors border rounded-lg newsletter-input bg-light-800 border-card-border text-text-primary placeholder-text-secondary focus:outline-none focus:ring-2 focus:ring-accent focus:border-accent"
          required
        />
        <button
          type="submit"
          class="px-6 py-2 btn-primary whitespace-nowrap newsletter-submit"
        >
          <span class="submit-text">Subscribe</span>
          <span class="loading-spinner hidden">
            <svg class="w-4 h-4 animate-spin" fill="none" viewBox="0 0 24 24">
              <circle
                class="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="4"></circle>
              <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
          </span>
        </button>
      </div>
      <div class="feedback-message mt-3 text-sm hidden"></div>
    </form>
  </div>
</newsletter-subscription>

<style>
  .newsletter-input:focus {
    box-shadow: 0 0 0 3px rgba(var(--color-accent-rgb), 0.1);
  }

  .newsletter-submit:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .feedback-message.success {
    @apply text-green-500;
  }

  .feedback-message.error {
    @apply text-red-500;
  }

  .newsletter-form {
    position: relative;
  }

  .newsletter-input.error {
    @apply border-red-500 focus:ring-red-500 focus:border-red-500;
  }

  .newsletter-input.success {
    @apply border-green-500 focus:ring-green-500 focus:border-green-500;
  }

  /* Animation for submit button */
  .newsletter-submit {
    position: relative;
    overflow: hidden;
  }

  .newsletter-submit::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    transition: left 0.5s;
  }

  .newsletter-submit:hover::before {
    left: 100%;
  }
</style>

<script>
  class NewsletterSubscription extends HTMLElement {
    private form: HTMLFormElement | null;
    private emailInput: HTMLInputElement | null;
    private submitButton: HTMLButtonElement | null;
    private submitText: HTMLElement | null;
    private loadingSpinner: HTMLElement | null;
    private feedbackMessage: HTMLElement | null;

    constructor() {
      super();
      this.form = this.querySelector('.newsletter-form') as HTMLFormElement;
      this.emailInput = this.querySelector(
        '.newsletter-input'
      ) as HTMLInputElement;
      this.submitButton = this.querySelector(
        '.newsletter-submit'
      ) as HTMLButtonElement;
      this.submitText = this.querySelector('.submit-text') as HTMLElement;
      this.loadingSpinner = this.querySelector(
        '.loading-spinner'
      ) as HTMLElement;
      this.feedbackMessage = this.querySelector(
        '.feedback-message'
      ) as HTMLElement;
      this.init();
    }

    init() {
      this.form?.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleSubmit();
      });

      // Real-time email validation
      this.emailInput?.addEventListener('input', () => {
        this.validateEmail();
      });

      // Clear validation states on focus
      this.emailInput?.addEventListener('focus', () => {
        this.clearValidationStates();
      });
    }

    async handleSubmit() {
      if (!this.validateEmail()) {
        return;
      }

      this.setLoadingState(true);
      this.clearFeedback();

      try {
        // Simulate API call (replace with actual endpoint)
        await this.subscribeEmail(this.emailInput!.value);
        this.showSuccess();
      } catch (error) {
        this.showError('Subscription failed. Please try again.');
      } finally {
        this.setLoadingState(false);
      }
    }

    async subscribeEmail(email: string): Promise<void> {
      const response = await fetch('/api/newsletter', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.message || 'Subscription failed');
      }
    }

    validateEmail(): boolean {
      const email = this.emailInput!.value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

      if (!email) {
        this.showInputError('Email is required');
        return false;
      }

      if (!emailRegex.test(email)) {
        this.showInputError('Please enter a valid email address');
        return false;
      }

      this.clearValidationStates();
      return true;
    }

    setLoadingState(loading: boolean) {
      if (this.submitButton) {
        this.submitButton.disabled = loading;
      }

      if (loading) {
        this.submitText?.classList.add('hidden');
        this.loadingSpinner?.classList.remove('hidden');
      } else {
        this.submitText?.classList.remove('hidden');
        this.loadingSpinner?.classList.add('hidden');
      }
    }

    showSuccess() {
      this.emailInput!.value = '';
      this.emailInput?.classList.add('success');
      this.showFeedback(
        'ðŸŽ‰ Successfully subscribed! Thank you for joining.',
        'success'
      );

      // Clear success state after 3 seconds
      setTimeout(() => {
        this.clearValidationStates();
        this.clearFeedback();
      }, 3000);
    }

    showError(message: string) {
      this.emailInput?.classList.add('error');
      this.showFeedback(message, 'error');
    }

    showInputError(message: string) {
      this.emailInput?.classList.add('error');
      this.showFeedback(message, 'error');
    }

    showFeedback(message: string, type: 'success' | 'error') {
      if (this.feedbackMessage) {
        this.feedbackMessage.textContent = message;
        this.feedbackMessage.className = `feedback-message mt-3 text-sm ${type}`;
        this.feedbackMessage.classList.remove('hidden');
      }
    }

    clearFeedback() {
      if (this.feedbackMessage) {
        this.feedbackMessage.classList.add('hidden');
        this.feedbackMessage.textContent = '';
      }
    }

    clearValidationStates() {
      this.emailInput?.classList.remove('error', 'success');
      this.clearFeedback();
    }
  }

  // Register the custom element
  customElements.define('newsletter-subscription', NewsletterSubscription);
</script>
