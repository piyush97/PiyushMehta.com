---
// Related Posts Recommendation System
import { getCollection } from 'astro:content';

export interface Props {
  currentSlug: string;
  currentTags?: string[];
  maxPosts?: number;
}

const { currentSlug, currentTags = [], maxPosts = 3 } = Astro.props;

// Get all blog posts
const allPosts = await getCollection('blog');

// Calculate similarity scores for each post
function calculateSimilarity(post: { data: { tags?: string[] } }, targetTags: string[]) {
  if (!post.data.tags || !targetTags.length) return 0;
  
  const postTags = post.data.tags.map((tag: string) => tag.toLowerCase());
  const normalizedTargetTags = targetTags.map(tag => tag.toLowerCase());
  
  // Count matching tags
  const matchingTags = postTags.filter((tag: string) => 
    normalizedTargetTags.includes(tag)
  ).length;
  
  // Calculate similarity score (Jaccard similarity)
  const unionSize = new Set([...postTags, ...normalizedTargetTags]).size;
  const similarity = matchingTags / unionSize;
  
  return similarity;
}

// Get related posts
const relatedPosts = allPosts
  .filter(post => post.slug !== currentSlug) // Exclude current post
  .map(post => ({
    ...post,
    similarity: calculateSimilarity(post, currentTags)
  }))
  .sort((a, b) => {
    // Sort by similarity first, then by date
    if (b.similarity !== a.similarity) {
      return b.similarity - a.similarity;
    }
    return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
  })
  .slice(0, maxPosts);

// Calculate reading time for each post
function calculateReadingTime(content: string) {
  const wordsPerMinute = 200;
  const wordCount = content.trim().split(/\s+/).length;
  return Math.ceil(wordCount / wordsPerMinute);
}
---

{relatedPosts.length > 0 && (
  <section 
    class="related-posts-section mt-16 pt-8 border-t border-card-border"
    aria-labelledby="related-posts-heading"
  >
    <div class="flex items-center justify-between mb-8">
      <h2 
        id="related-posts-heading"
        class="text-2xl font-bold text-text-primary flex items-center space-x-3"
      >
        <svg class="w-6 h-6 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.102m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
        </svg>
        <span>Related Articles</span>
      </h2>
      
      <a 
        href="/blog/"
        class="text-sm font-medium text-accent hover:text-accent/80 transition-colors duration-200 flex items-center space-x-1"
      >
        <span>View all posts</span>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M9 5l7 7-7 7" />
        </svg>
      </a>
    </div>

    <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {relatedPosts.map((post) => {
        const readingTime = calculateReadingTime(post.body);
        const postUrl = `/blog/${post.slug}`;
        const hasMatchingTags = post.similarity > 0;
        
        return (
          <article 
            class="related-post-card group relative bg-surface-100 rounded-lg border border-card-border overflow-hidden transition-all duration-300 hover:border-accent/50 hover:shadow-lg hover:shadow-accent/10 hover:-translate-y-1"
            data-similarity={post.similarity.toFixed(2)}
          >
            {/* Similarity Indicator */}
            {hasMatchingTags && (
              <div class="absolute top-3 right-3 z-10">
                <div class="flex items-center space-x-1 px-2 py-1 bg-accent/20 text-accent text-xs font-medium rounded-full backdrop-blur-sm">
                  <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd" />
                  </svg>
                  <span>Similar</span>
                </div>
              </div>
            )}

            {/* Featured Image */}
            {post.data.image && (
              <div class="aspect-video overflow-hidden">
                <img
                  src={post.data.image.url}
                  alt={post.data.image.alt || post.data.title}
                  class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                  loading="lazy"
                  decoding="async"
                />
              </div>
            )}

            <div class="p-6">
              {/* Post Meta */}
              <div class="flex items-center justify-between mb-3 text-sm text-light-400">
                <time datetime={post.data.date.toISOString()}>
                  {post.data.date.toLocaleDateString('en-US', {
                    month: 'short',
                    day: 'numeric',
                    year: 'numeric'
                  })}
                </time>
                <div class="flex items-center space-x-1">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>{readingTime} min read</span>
                </div>
              </div>

              {/* Post Title */}
              <h3 class="font-bold text-lg leading-tight mb-3 group-hover:text-accent transition-colors duration-200">
                <a 
                  href={postUrl}
                  class="stretched-link focus:outline-none focus:ring-2 focus:ring-accent/50 rounded"
                  aria-describedby={`post-${post.slug}-description`}
                >
                  {post.data.title}
                </a>
              </h3>

              {/* Post Description */}
              {post.data.description && (
                <p 
                  id={`post-${post.slug}-description`}
                  class="text-light-300 text-sm leading-relaxed mb-4 line-clamp-3"
                >
                  {post.data.description}
                </p>
              )}

              {/* Tags */}
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-4">
                  {post.data.tags.slice(0, 3).map((tag: string) => {
                    const isMatching = currentTags.some(currentTag => 
                      currentTag.toLowerCase() === tag.toLowerCase()
                    );
                    
                    return (
                      <span 
                        class={`px-2 py-1 text-xs font-medium rounded-full transition-colors duration-200 ${
                          isMatching 
                            ? 'bg-accent/20 text-accent border border-accent/30' 
                            : 'bg-light-800 text-light-300 hover:bg-light-700'
                        }`}
                        title={isMatching ? 'Matching tag' : ''}
                      >
                        {tag}
                      </span>
                    );
                  })}
                  {post.data.tags.length > 3 && (
                    <span class="px-2 py-1 text-xs font-medium rounded-full bg-light-800 text-light-400">
                      +{post.data.tags.length - 3} more
                    </span>
                  )}
                </div>
              )}

              {/* Read More Link */}
              <div class="flex items-center justify-between">
                <span class="text-sm font-medium text-accent group-hover:text-accent/80 transition-colors duration-200 flex items-center space-x-1">
                  <span>Read article</span>
                  <svg class="w-4 h-4 transition-transform duration-200 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M9 5l7 7-7 7" />
                  </svg>
                </span>
                
                {post.data.author && (
                  <span class="text-xs text-light-400">
                    by {post.data.author}
                  </span>
                )}
              </div>
            </div>
          </article>
        );
      })}
    </div>

    {/* View More Button */}
    <div class="mt-8 text-center">
      <a 
        href="/blog/"
        class="inline-flex items-center space-x-2 px-6 py-3 bg-accent text-white font-medium rounded-lg hover:bg-accent/90 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-accent/50 hover:shadow-lg hover:shadow-accent/25"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
        </svg>
        <span>Explore All Articles</span>
      </a>
    </div>
  </section>
)}

<script>
  // Related Posts Analytics and Interactions
  class RelatedPostsAnalytics {
    constructor() {
      this.initializeTracking();
      this.addInteractiveFeatures();
    }

    initializeTracking() {
      // Track related post views
      const relatedSection = document.querySelector('.related-posts-section');
      if (!relatedSection) return;

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            this.trackEvent('related_posts_viewed', {
              posts_shown: document.querySelectorAll('.related-post-card').length
            });
          }
        });
      }, { threshold: 0.5 });

      observer.observe(relatedSection);

      // Track related post clicks
      document.addEventListener('click', (e) => {
        const postCard = e.target.closest('.related-post-card');
        if (postCard) {
          const similarity = parseFloat(postCard.dataset.similarity || '0');
          const title = postCard.querySelector('h3')?.textContent || '';
          
          this.trackEvent('related_post_clicked', {
            post_title: title,
            similarity_score: similarity,
            position: Array.from(postCard.parentElement.children).indexOf(postCard)
          });
        }
      });
    }

    addInteractiveFeatures() {
      // Add hover animations
      const postCards = document.querySelectorAll('.related-post-card');
      
      postCards.forEach(card => {
        card.addEventListener('mouseenter', () => {
          this.highlightSimilarTags(card);
        });
        
        card.addEventListener('mouseleave', () => {
          this.unhighlightTags();
        });
      });

      // Add keyboard navigation
      postCards.forEach((card, index) => {
        const link = card.querySelector('.stretched-link');
        if (link) {
          link.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowRight' && index < postCards.length - 1) {
              e.preventDefault();
              postCards[index + 1].querySelector('.stretched-link')?.focus();
            } else if (e.key === 'ArrowLeft' && index > 0) {
              e.preventDefault();
              postCards[index - 1].querySelector('.stretched-link')?.focus();
            }
          });
        }
      });
    }

    highlightSimilarTags(hoveredCard) {
      const hoveredTags = Array.from(hoveredCard.querySelectorAll('.bg-accent\\/20')).map(
        tag => tag.textContent.trim()
      );
      
      // Highlight matching tags in other cards
      document.querySelectorAll('.related-post-card').forEach(card => {
        if (card === hoveredCard) return;
        
        card.querySelectorAll('span[class*="bg-accent"]').forEach(tag => {
          if (hoveredTags.includes(tag.textContent.trim())) {
            tag.style.transform = 'scale(1.05)';
            tag.style.boxShadow = '0 0 8px rgba(255, 215, 0, 0.3)';
          }
        });
      });
    }

    unhighlightTags() {
      document.querySelectorAll('.related-post-card span[class*="bg-accent"]').forEach(tag => {
        tag.style.transform = '';
        tag.style.boxShadow = '';
      });
    }

    trackEvent(eventName, properties = {}) {
      // Send analytics event (integrate with your analytics service)
      if (typeof gtag !== 'undefined') {
        gtag('event', eventName, properties);
      }
      
      // Console log for development
      if (window.location.hostname === 'localhost') {
        console.log('Related Posts Event:', eventName, properties);
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new RelatedPostsAnalytics();
  });
</script>

<style>
  .stretched-link::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 1;
    content: "";
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Smooth transitions for tag highlighting */
  .related-post-card span {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  /* Focus styles for accessibility */
  .stretched-link:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
    border-radius: 4px;
  }

  /* Hover effect for the entire card */
  .related-post-card:hover {
    background: linear-gradient(135deg, var(--color-surface-100) 0%, rgba(255, 215, 0, 0.05) 100%);
  }

  /* Enhanced visual feedback */
  .related-post-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, var(--color-accent), transparent);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .related-post-card:hover::before {
    opacity: 1;
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .related-posts-section .grid {
      grid-template-columns: 1fr;
    }
    
    .related-post-card {
      margin-bottom: 1rem;
    }
  }

  /* High contrast mode */
  .high-contrast .related-post-card {
    border-color: #ffffff;
    background: #000000;
  }

  .high-contrast .related-post-card:hover {
    border-color: #ffff00;
    background: #1a1a1a;
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .related-post-card,
    .related-post-card img,
    .related-post-card span {
      transition: none;
      transform: none !important;
    }
  }
</style>