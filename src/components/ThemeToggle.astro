---
// Interactive theme toggle component that works on the client
// Now updated to work with the multi-theme system
---

<button
  id="theme-toggle"
  class="p-2 transition-colors rounded-lg dark-mode-toggle hover:bg-surface-100/20 duration-base"
  aria-label="Toggle between light and dark mode"
>
  <svg
    id="sun-icon"
    class="hidden w-5 h-5 text-text-primary"
    fill="currentColor"
    viewBox="0 0 20 20"
  >
    <path
      fill-rule="evenodd"
      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
      clip-rule="evenodd"
    >
    </path>
  </svg>
  <svg
    id="moon-icon"
    class="w-5 h-5 text-text-primary"
    fill="currentColor"
    viewBox="0 0 20 20"
  >
    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
    ></path>
  </svg>
</button>

<script>
  class ThemeToggle extends HTMLElement {
    private button: HTMLButtonElement | null;
    private sunIcon: SVGElement | null;
    private moonIcon: SVGElement | null;

    constructor() {
      super();
      this.button = this.querySelector('#theme-toggle') as HTMLButtonElement;
      this.sunIcon = this.querySelector('#sun-icon') as SVGElement;
      this.moonIcon = this.querySelector('#moon-icon') as SVGElement;
      this.init();
    }

    init() {
      // Get initial theme and set the appropriate icons
      this.updateIcons();

      // Add click listener to toggle between light and dark
      this.button?.addEventListener('click', () => {
        this.toggleLightDark();
      });

      // Listen for theme changes from other components
      document.addEventListener('themechange', () => {
        this.updateIcons();
      });

      // Listen for system theme changes
      window
        .matchMedia('(prefers-color-scheme: dark)')
        .addEventListener('change', (e) => {
          if (!localStorage.getItem('theme')) {
            // Only apply system preference if user hasn't set a preference
            this.setTheme(e.matches ? 'professional-dark' : 'professional-light');
            this.updateIcons();
          }
        });
    }

    setTheme(theme) {
      const root = document.documentElement;
      
      // Disable transitions during theme change
      root.classList.add('no-transition');
      
      // Handle themes with a mapping to ensure backward compatibility
      const lightThemes = ['professional-light', 'minimalist'];
      
      // Remove all theme classes
      root.classList.remove(
        'professional-dark',
        'professional-light',
        'retro-tech', 
        'minimalist',
        'high-contrast',
        'custom-theme',
        'light',
        'dark'
      );
      
      // Add the selected theme class
      root.classList.add(theme);
      
      // For backward compatibility
      if (lightThemes.includes(theme)) {
        root.classList.add('light');
      }
      
      // Store the theme preference
      localStorage.setItem('theme', theme);
      
      // Re-enable transitions after a brief delay
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          root.classList.remove('no-transition');
        });
      });
      
      // Dispatch theme change event
      const event = new CustomEvent('themechange', { detail: { theme } });
      document.dispatchEvent(event);
    }

    toggleLightDark() {
      // Get current theme from document class list
      const currentTheme = this.getCurrentTheme();
      
      // Determine if it's a light theme
      const isLightTheme = currentTheme.includes('light') || currentTheme === 'minimalist';
      
      // Toggle between professional dark and professional light
      const newTheme = isLightTheme ? 'professional-dark' : 'professional-light';
      
      this.setTheme(newTheme);
      this.updateIcons();

      // Add transition effect
      this.button?.classList.add('transition-transform', 'duration-200');
      if (this.button) {
        this.button.style.transform = 'scale(0.95)';
      }

      setTimeout(() => {
        if (this.button) {
          this.button.style.transform = 'scale(1)';
        }
      }, 150);
    }

    getCurrentTheme() {
      // Check for themes in this order
      const root = document.documentElement;
      const possibleThemes = [
        'professional-dark',
        'professional-light',
        'retro-tech',
        'minimalist',
        'high-contrast',
        'custom-theme'
      ];
      
      // For backwards compatibility
      if (root.classList.contains('light') && !this.hasAnySpecificTheme()) {
        return 'professional-light';
      } else if (!root.classList.contains('light') && !this.hasAnySpecificTheme()) {
        return 'professional-dark';
      }
      
      for (const theme of possibleThemes) {
        if (root.classList.contains(theme)) {
          return theme;
        }
      }
      
      return 'professional-dark'; // Default
    }
    
    hasAnySpecificTheme() {
      const root = document.documentElement;
      const themes = [
        'professional-dark',
        'professional-light',
        'retro-tech',
        'minimalist',
        'high-contrast',
        'custom-theme'
      ];
      
      return themes.some(theme => root.classList.contains(theme));
    }

    updateIcons() {
      const currentTheme = this.getCurrentTheme();
      const isLightTheme = currentTheme.includes('light') || currentTheme === 'minimalist';

      if (this.sunIcon && this.moonIcon) {
        this.sunIcon.classList.toggle('hidden', !isLightTheme);
        this.moonIcon.classList.toggle('hidden', isLightTheme);
      }
    }
  }

  // Register the custom element
  customElements.define('theme-toggle', ThemeToggle);
</script>
