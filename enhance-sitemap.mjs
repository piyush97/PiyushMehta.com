// generate-sitemap.mjs
// This script enhances the default Astro sitemap with additional SEO optimizations

import fs from 'fs';
import path, { dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Wait for the Astro build to complete and create the initial sitemap
const enhanceSitemap = async () => {
  console.log('Enhancing sitemap.xml for SEO optimization...');
  
  // Path to the sitemap generated by Astro
  const sitemapPath = path.join(__dirname, 'dist', 'sitemap.xml');
  
  try {
    // Read the existing sitemap
    let sitemapContent = fs.readFileSync(sitemapPath, 'utf8');
    
    // Add additional sitemap entries for key pages with high priority
    const highPriorityUrls = [
      { url: 'https://piyushmehta.com/', priority: '1.0', changefreq: 'daily' },
      { url: 'https://piyushmehta.com/blog/', priority: '0.9', changefreq: 'daily' },
      { url: 'https://piyushmehta.com/services/', priority: '0.9', changefreq: 'weekly' },
      { url: 'https://piyushmehta.com/projects/', priority: '0.8', changefreq: 'weekly' },
      { url: 'https://piyushmehta.com/about/', priority: '0.8', changefreq: 'monthly' },
      { url: 'https://piyushmehta.com/contact-me/', priority: '0.8', changefreq: 'monthly' },
      { url: 'https://piyushmehta.com/resume/', priority: '0.8', changefreq: 'monthly' },
    ];
    
    // Find the closing </urlset> tag
    const closingTag = '</urlset>';
    const closingTagIndex = sitemapContent.indexOf(closingTag);
    
    if (closingTagIndex !== -1) {
      // Insert new URLs before the closing tag
      let newUrlsXml = '';
      
      // Check if each URL already exists in the sitemap
      for (const { url, priority, changefreq } of highPriorityUrls) {
        if (!sitemapContent.includes(`<loc>${url}</loc>`)) {
          // Add new URL
          newUrlsXml += `
  <url>
    <loc>${url}</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>${changefreq}</changefreq>
    <priority>${priority}</priority>
  </url>`;
        } else {
          // Update priority and changefreq for existing URLs
          const urlStartIndex = sitemapContent.indexOf(`<loc>${url}</loc>`);
          if (urlStartIndex !== -1) {
            const urlEntryEndIndex = sitemapContent.indexOf('</url>', urlStartIndex) + 6;
            const urlEntry = sitemapContent.substring(urlStartIndex - 7, urlEntryEndIndex);
            
            // Create updated URL entry
            const updatedUrlEntry = `
  <url>
    <loc>${url}</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>${changefreq}</changefreq>
    <priority>${priority}</priority>
  </url>`;
            
            // Replace the old entry with the updated one
            sitemapContent = sitemapContent.replace(urlEntry, updatedUrlEntry);
          }
        }
      }
      
      // Insert any new URLs before the closing tag
      if (newUrlsXml) {
        sitemapContent = sitemapContent.slice(0, closingTagIndex) + newUrlsXml + sitemapContent.slice(closingTagIndex);
      }
      
      // Write the enhanced sitemap back to the file
      fs.writeFileSync(sitemapPath, sitemapContent, 'utf8');
      console.log('Sitemap successfully enhanced!');
    } else {
      console.error('Could not find closing </urlset> tag in sitemap.xml');
    }
  } catch (error) {
    console.error('Error enhancing sitemap:', error);
  }
};

// Execute the function
enhanceSitemap().catch(console.error);
